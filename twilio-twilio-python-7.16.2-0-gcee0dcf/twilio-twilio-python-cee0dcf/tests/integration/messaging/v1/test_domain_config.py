# coding=utf-8
r"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /
"""

from tests import IntegrationTestCase
from tests.holodeck import Request
from twilio.base import serialize
from twilio.base.exceptions import TwilioException
from twilio.http.response import Response


class DomainConfigTestCase(IntegrationTestCase):

    def test_update_request(self):
        self.holodeck.mock(Response(500, ''))

        with self.assertRaises(TwilioException):
            self.client.messaging.v1.domain_config("DNXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX").update(messaging_service_sids=['MGXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'])

        values = {
            'MessagingServiceSids': serialize.map(['MGXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'], lambda e: e),
        }

        self.holodeck.assert_has_request(Request(
            'post',
            'https://messaging.twilio.com/v1/LinkShortening/Domains/DNXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX/Config',
            data=values,
        ))

    def test_update_response(self):
        self.holodeck.mock(Response(
            200,
            '''
            {
                "domain_sid": "DNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "messaging_service_sids": [
                    "MGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                    "MGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab"
                ],
                "config_sid": "ZKaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "fallback_url": "https://www.example.com",
                "callback_url": "https://www.example.com",
                "date_created": "2015-07-30T20:00:00Z",
                "date_updated": "2015-07-30T20:00:00Z",
                "url": "https://messaging.twilio.com/v1/LinkShortening/Domains/DNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Config"
            }
            '''
        ))

        actual = self.client.messaging.v1.domain_config("DNXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX").update(messaging_service_sids=['MGXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'])

        self.assertIsNotNone(actual)

    def test_create_response(self):
        self.holodeck.mock(Response(
            200,
            '''
            {
                "domain_sid": "DNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "messaging_service_sids": [
                    "MGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                    "MGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab"
                ],
                "config_sid": "ZKaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "fallback_url": "https://www.example.com",
                "callback_url": "https://www.example.com",
                "date_created": "2015-07-30T20:00:00Z",
                "date_updated": "2015-07-30T20:00:00Z",
                "url": "https://messaging.twilio.com/v1/LinkShortening/Domains/DNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Config"
            }
            '''
        ))

        actual = self.client.messaging.v1.domain_config("DNXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX").update(messaging_service_sids=['MGXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'])

        self.assertIsNotNone(actual)

    def test_fetch_request(self):
        self.holodeck.mock(Response(500, ''))

        with self.assertRaises(TwilioException):
            self.client.messaging.v1.domain_config("DNXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX").fetch()

        self.holodeck.assert_has_request(Request(
            'get',
            'https://messaging.twilio.com/v1/LinkShortening/Domains/DNXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX/Config',
        ))

    def test_fetch_response(self):
        self.holodeck.mock(Response(
            200,
            '''
            {
                "domain_sid": "DNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "config_sid": "ZKaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                "fallback_url": "https://www.example.com",
                "callback_url": "https://www.example.com",
                "date_created": "2015-07-30T20:00:00Z",
                "date_updated": "2015-07-30T20:00:00Z",
                "messaging_service_sids": [
                    "MGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                    "MGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab"
                ],
                "url": "https://messaging.twilio.com/v1/LinkShortening/Domains/DNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Config"
            }
            '''
        ))

        actual = self.client.messaging.v1.domain_config("DNXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX").fetch()

        self.assertIsNotNone(actual)
